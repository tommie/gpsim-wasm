'use strict';

import gpsimLoad_ from './gpsim_wasm.mjs';

async function gpsimLoad(timeoutMS) {
    // WASM library initialization isn't keeping Node.js busy.
    //
    // https://github.com/nodejs/node/issues/22088
    let timeout = setTimeout(
        () => reject(new Error('timeout while loading gpsim library')),
        timeoutMS || 10000);

    try {
        return await gpsimLoad_({
            print: console.log,
            printErr: console.error,
            noInitialRun: true,
        });
    } finally {
        clearTimeout(timeout);
        timeout = -1;
    }
}

function vectorToArray(v, mapper = (e) => e) {
  const n = v.size();
  const a = new Array(n);
  for (let i = 0; i < n; ++i) {
    a[i] = mapper(v.get(i));
  }
  return a;
}

gpsimLoad().then(async module => {
    const gpsim = {
        gpsimInterface: {
            eAdvancementModes: module.gpsimInterface_eAdvancementModes,
        },
        Interface: module.Interface,
        ProcessorConstructor: module.ProcessorConstructor,
        SignalSink: module.SignalSink,
        get_interface: module.get_interface,
        Program: module.Program,
    };

    let InterfaceImpl = gpsim.Interface.extend("InterfaceImpl", {
        UpdateObject(newValue) {
            console.log("updateObject", newValue);
        },

        SimulationHasStopped() {
            console.log("simulationHasStopped");
        },

        NewProcessor(p) {
            console.log("newProcessor", p);
        },

        Update() {
            console.log("update");
        },
    });

    let SignalSinkImpl = gpsim.SignalSink.extend('SignalSinkImpl', {
        __construct(pinNumber) {
            this.__parent.__construct.call(this);
            this.pinNumber = pinNumber;
        },

        setSinkState(v) {
            console.log("sink", this.pinNumber, String.fromCharCode(v));
        },

        release() {
            this.delete();
        },
    });

    module.initialize_gpsim_core();

    if (false) {
        const procList = gpsim.ProcessorConstructor.GetList();
        const procs = new Array(procList.size());
        for (let i = 0; i < procs.length; ++i) {
            procs[i] = procList.get(i);
        }
        console.log(procs);

        const procCons = gpsim.ProcessorConstructor.findByType('p16f887');
        const proc = procCons.ConstructProcessor('aproc');
    }

    const sim = gpsim.get_interface();
    const ctx = sim.simulation_context();

    try {
        const iface = new InterfaceImpl();
        try {
            sim.add_interface(iface);  // Takes ownership.
        } catch (ex) {
            iface.delete();
            throw ex;
        }

        try {
            const cod = Buffer.from(`AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhwb3J0LmNvZAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMTBKYW4yM0gFBTEuNC4wAAAAAAAA
AAAAAAAAAAAFZ3Bhc20AAAAAAAAnQ29weXJpZ2h0IChjKSAxOTk4LTIwMTQgZ3B1dGlscyBwcm9q
ZWN0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAgADAAMAAAAAAAAEAAQAAAAAAAEABjE2
Zjg4NwAABQASAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD+
MIMWAxOFAIMSAxMGCIMSAxOFAGMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhw
b3J0LmFzbQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAlL3Vzci9zaGFyZS9ncHV0aWxzL2hlYWRlci9wMTZmODg3LmluYwAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8B
AAAAAJABAAAAAZABAAAAAZACAAAAAZADAAAAAZAEAAAAAZAFAAAAAZAGAAAAAZAHAAAAAZAIAAAA
AZAJAAAAAZAqAwAAAJACAAAAAIADAAAAAIAEAAEAAIAFAAMAAIAFAAMAAJAGAAQAAIAHAAQAAIAI
AAYAAIAJAAcAAIAKAAkAAIALAAoAAJAMAAsAAJANAAsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVBQkRF
Ti8AAAAAAAZBQkRPVkYvAAAAAAcFQUNLRFQvAAAAAAUFQUNLRU4vAAAAAAQHQUNLU1RBVC8AAAAA
BgZBRENPTjAvAAAAAB8GQURDT04xLwAAAACfBUFEQ1MwLwAAAAAGBUFEQ1MxLwAAAAAHBUFEREVO
LwAAAAADBEFERk0vAAAAAAcEQURJRS8AAAAABgRBRElGLwAAAAAGBEFET04vAAAAAAAGQURSRVNI
LwAAAAAeBkFEUkVTTC8AAAAAngRBTlMwLwAAAAAABEFOUzEvAAAAAAEFQU5TMTAvAAAAAAIFQU5T
MTEvAAAAAAMFQU5TMTIvAAAAAAQFQU5TMTMvAAAAAAUEQU5TMi8AAAAAAgRBTlMzLwAAAAADBEFO
UzQvAAAAAAQEQU5TNS8AAAAABQRBTlM2LwAAAAAGBEFOUzcvAAAAAAcEQU5TOC8AAAAAAARBTlM5
LwAAAAABBUFOU0VMLwAAAAGIBkFOU0VMSC8AAAABiQdCQVVEQ1RMLwAAAAGHBUJDTElFLwAAAAAD
BUJDTElGLwAAAAADAkJGLwAAAAAABEJSRzAvAAAAAAAEQlJHMS8AAAAAAQVCUkcxMC8AAAAAAgVC
UkcxMS8AAAAAAwVCUkcxMi8AAAAABAVCUkcxMy8AAAAABQVCUkcxNC8AAAAABgAAAAAABUJSRzE1
LwAAAAAHBUJSRzE2LwAAAAADBEJSRzIvAAAAAAIEQlJHMy8AAAAAAwRCUkc0LwAAAAAEBEJSRzUv
AAAAAAUEQlJHNi8AAAAABgRCUkc3LwAAAAAHBEJSRzgvAAAAAAAEQlJHOS8AAAAAAQRCUkdILwAA
AAACAUMvAAAAAAAFQzFDSDAvAAAAAAAFQzFDSDEvAAAAAAEEQzFJRS8AAAAABQRDMUlGLwAAAAAF
BEMxT0UvAAAAAAUEQzFPTi8AAAAABwVDMU9VVC8AAAAABgVDMVBPTC8AAAAABANDMVIvAAAAAAIG
QzFSU0VMLwAAAAAFBUMxU0VOLwAAAAAFBUMyQ0gwLwAAAAAABUMyQ0gxLwAAAAABBEMySUUvAAAA
AAYEQzJJRi8AAAAABgRDMk9FLwAAAAAFBEMyT04vAAAAAAcFQzJPVVQvAAAAAAYFQzJQT0wvAAAA
AAQDQzJSLwAAAAACBUMyUkVOLwAAAAAEBkMyUlNFTC8AAAAABAZDMlNZTkMvAAAAAAAHQ0NQMUNP
Ti8AAAAAFwZDQ1AxSUUvAAAAAAIGQ0NQMUlGLwAAAAACBkNDUDFNMC8AAAAAAAZDQ1AxTTEvAAAA
AAEGQ0NQMU0yLwAAAAACBkNDUDFNMy8AAAAAAwVDQ1AxWC8AAAAABQAAAAAAAAAAAAAFQ0NQMVkv
AAAAAAQHQ0NQMkNPTi8AAAAAHQZDQ1AySUUvAAAAAAAGQ0NQMklGLwAAAAAABkNDUDJNMC8AAAAA
AAZDQ1AyTTEvAAAAAAEGQ0NQMk0yLwAAAAACBkNDUDJNMy8AAAAAAwVDQ1AyWC8AAAAABQVDQ1Ay
WS8AAAAABAVDQ1BSMS8AAAAAFQZDQ1BSMUgvAAAAABYGQ0NQUjFMLwAAAAAVBUNDUFIyLwAAAAAb
BkNDUFIySC8AAAAAHAZDQ1BSMkwvAAAAABsEQ0hTMC8AAAAAAgRDSFMxLwAAAAADBENIUzIvAAAA
AAQEQ0hTMy8AAAAABQNDS0UvAAAAAAYDQ0tQLwAAAAAEB0NNMUNPTjAvAAAAAQcHQ00yQ09OMC8A
AAABCAdDTTJDT04xLwAAAAEJBENSRU4vAAAAAAQEQ1NSQy8AAAAABwFELwAAAAAFDERBVEFfQURE
UkVTUy8AAAAABQJEQy8AAAAAAQVEQzFCMC8AAAAABAVEQzFCMS8AAAAABQVEQzJCMC8AAAAABAVE
QzJCMS8AAAAABQNEX0EvAAAAAAUHRF9OT1RfQS8AAAAABQZFQ0NQQVMvAAAAAJwHRUNDUEFTMC8A
AAAABAdFQ0NQQVMxLwAAAAAFB0VDQ1BBUzIvAAAAAAYHRUNDUEFTRS8AAAAABwAAAAVFRUFEUi8A
AAABDQZFRUFEUkgvAAAAAQ8GRUVDT04xLwAAAAGMBkVFQ09OMi8AAAABjQVFRURBVC8AAAABDAZF
RURBVEEvAAAAAQwGRUVEQVRILwAAAAEOBEVFSUUvAAAAAAQERUVJRi8AAAAABAVFRVBHRC8AAAAA
BwFGLwAAAAABBEZFUlIvAAAAAAIDRlNSLwAAAAAEBUZWUkVOLwAAAAAABEdDRU4vAAAAAAcDR0lF
LwAAAAAHAkdPLwAAAAABB0dPX0RPTkUvAAAAAAELR09fTk9UX0RPTkUvAAAAAAEDSFRTLwAAAAAC
CEkyQ19EQVRBLwAAAAAFCEkyQ19SRUFELwAAAAACCUkyQ19TVEFSVC8AAAAAAwhJMkNfU1RPUC8A
AAAABARJTkRGLwAAAAAABklOVENPTi8AAAAACwRJTlRFLwAAAAAEBklOVEVERy8AAAAABgRJTlRG
LwAAAAABBElPQ0IvAAAAAJYFSU9DQjAvAAAAAAAFSU9DQjEvAAAAAAEFSU9DQjIvAAAAAAIFSU9D
QjMvAAAAAAMFSU9DQjQvAAAAAAQFSU9DQjUvAAAAAAUFSU9DQjYvAAAAAAYFSU9DQjcvAAAAAAcF
SVJDRjAvAAAAAAQFSVJDRjEvAAAAAAUFSVJDRjIvAAAAAAYDSVJQLwAAAAAHAAAAA0xUUy8AAAAA
AQZNQzFPVVQvAAAAAAcGTUMyT1VULwAAAAAGA01TSy8AAAAAkwRNU0swLwAAAAAABE1TSzEvAAAA
AAEETVNLMi8AAAAAAgRNU0szLwAAAAADBE1TSzQvAAAAAAQETVNLNS8AAAAABQRNU0s2LwAAAAAG
BE1TSzcvAAAAAAcFTk9UX0EvAAAAAAULTk9UX0FERFJFU1MvAAAAAAUGTk9UX0JPLwAAAAAAB05P
VF9CT1IvAAAAAAAITk9UX0RPTkUvAAAAAAEGTk9UX1BELwAAAAADB05PVF9QT1IvAAAAAAEITk9U
X1JCUFUvAAAAAAcHTk9UX1JDOC8AAAAABgpOT1RfVDFTWU5DLwAAAAACBk5PVF9UTy8AAAAABAdO
T1RfVFg4LwAAAAAGBU5PVF9XLwAAAAACCU5PVF9XUklURS8AAAAAAgRPRVJSLwAAAAABCk9QVElP
Tl9SRUcvAAAAAIEGT1NDQ09OLwAAAACPB09TQ1RVTkUvAAAAAJAFT1NGSUUvAAAAAAcFT1NGSUYv
AAAAAAcET1NUUy8AAAAAAwFQLwAAAAAEBFAxTTAvAAAAAAYEUDFNMS8AAAAABwNQQ0wvAAAAAAIG
UENMQVRILwAAAAAKBFBDT04vAAAAAI4EUERDMC8AAAAAAARQREMxLwAAAAABAAAEUERDMi8AAAAA
AgRQREMzLwAAAAADBFBEQzQvAAAAAAQEUERDNS8AAAAABQRQREM2LwAAAAAGBFBFSUUvAAAAAAYD
UEVOLwAAAAACBFBJRTEvAAAAAIwEUElFMi8AAAAAjQRQSVIxLwAAAAAMBFBJUjIvAAAAAA0FUE9S
VEEvAAAAAAUFUE9SVEIvAAAAAAYFUE9SVEMvAAAAAAcFUE9SVEQvAAAAAAgFUE9SVEUvAAAAAAkD
UFIyLwAAAACSBVBSU0VOLwAAAAAHA1BTMC8AAAAAAANQUzEvAAAAAAEDUFMyLwAAAAACA1BTQS8A
AAAAAwZQU1NBQzAvAAAAAAIGUFNTQUMxLwAAAAADBlBTU0JEMC8AAAAAAAZQU1NCRDEvAAAAAAEH
UFNUUkNPTi8AAAAAnQVQVUxTUi8AAAAAAgVQVUxTUy8AAAAAAwdQV00xQ09OLwAAAACbAVIvAAAA
AAIDUkEwLwAAAAAAA1JBMS8AAAAAAQNSQTIvAAAAAAIDUkEzLwAAAAADA1JBNC8AAAAABANSQTUv
AAAAAAUDUkE2LwAAAAAGA1JBNy8AAAAABwNSQjAvAAAAAAADUkIxLwAAAAABA1JCMi8AAAAAAgNS
QjMvAAAAAAMDUkI0LwAAAAAEA1JCNS8AAAAABQNSQjYvAAAAAAYAAAAAAAAAAANSQjcvAAAAAAcE
UkJJRS8AAAAAAwRSQklGLwAAAAAAA1JDMC8AAAAAAANSQzEvAAAAAAEDUkMyLwAAAAACA1JDMy8A
AAAAAwNSQzQvAAAAAAQDUkM1LwAAAAAFA1JDNi8AAAAABgNSQzcvAAAAAAcFUkM4XzkvAAAAAAYD
UkM5LwAAAAAGBFJDRDgvAAAAAAAEUkNFTi8AAAAAAwVSQ0lETC8AAAAABgRSQ0lFLwAAAAAFBFJD
SUYvAAAAAAUFUkNSRUcvAAAAABoFUkNTVEEvAAAAABgCUkQvAAAAAAADUkQwLwAAAAAAA1JEMS8A
AAAAAQNSRDIvAAAAAAIDUkQzLwAAAAADA1JENC8AAAAABANSRDUvAAAAAAUDUkQ2LwAAAAAGA1JE
Ny8AAAAABwNSRTAvAAAAAAADUkUxLwAAAAABA1JFMi8AAAAAAgNSRTMvAAAAAAMKUkVBRF9XUklU
RS8AAAAAAgNSUDAvAAAAAAUDUlAxLwAAAAAGBFJTRU4vAAAAAAEDUlg5LwAAAAAGBFJYOUQvAAAA
AAAHUl9OT1RfVy8AAAAAAgNSX1cvAAAAAAIBUy8AAAAAAwZTQk9SRU4vAAAAAAQEU0NLUC8AAAAA
BANTQ1MvAAAAAAADU0VOLwAAAAAABVNFTkRCLwAAAAADA1NNUC8AAAAABwAABVNQQlJHLwAAAACZ
BlNQQlJHSC8AAAAAmgRTUEVOLwAAAAAHA1NSMC8AAAAABgNTUjEvAAAAAAcFU1JDT04vAAAAAYUE
U1JFTi8AAAAABQZTU1BBREQvAAAAAJMGU1NQQlVGLwAAAAATBlNTUENPTi8AAAAAFAdTU1BDT04y
LwAAAACRBVNTUEVOLwAAAAAFBVNTUElFLwAAAAADBVNTUElGLwAAAAADBVNTUE0wLwAAAAAABVNT
UE0xLwAAAAABBVNTUE0yLwAAAAACBVNTUE0zLwAAAAADBlNTUE1TSy8AAAAAkwVTU1BPVi8AAAAA
BgdTU1BTVEFULwAAAACUBlNUQVRVUy8AAAAAAwRTVFJBLwAAAAAABFNUUkIvAAAAAAEEU1RSQy8A
AAAAAgRTVFJELwAAAAADB1NUUlNZTkMvAAAAAAQGU1dEVEVOLwAAAAAABFNZTkMvAAAAAAQEVDBD
Uy8AAAAABQRUMElFLwAAAAAFBFQwSUYvAAAAAAIEVDBTRS8AAAAABAdUMUNLUFMwLwAAAAAEB1Qx
Q0tQUzEvAAAAAAUFVDFDT04vAAAAABAGVDFHSU5WLwAAAAAHBVQxR0lWLwAAAAAHBVQxR1NTLwAA
AAABCFQxSU5TWU5DLwAAAAACB1QxT1NDRU4vAAAAAAMAAAAAAAAAAAAAAAAGVDFTWU5DLwAAAAAC
B1QyQ0tQUzAvAAAAAAAHVDJDS1BTMS8AAAAAAQVUMkNPTi8AAAAAEgRUTVIwLwAAAAABBlRNUjBJ
RS8AAAAABQZUTVIwSUYvAAAAAAIEVE1SMS8AAAAADgZUTVIxQ1MvAAAAAAEGVE1SMUdFLwAAAAAG
BVRNUjFILwAAAAAPBlRNUjFJRS8AAAAAAAZUTVIxSUYvAAAAAAAFVE1SMUwvAAAAAA4GVE1SMU9O
LwAAAAAABFRNUjIvAAAAABEGVE1SMklFLwAAAAABBlRNUjJJRi8AAAAAAQZUTVIyT04vAAAAAAIH
VE9VVFBTMC8AAAAAAwdUT1VUUFMxLwAAAAAEB1RPVVRQUzIvAAAAAAUHVE9VVFBTMy8AAAAABgVU
UklTQS8AAAAAhQZUUklTQTAvAAAAAAAGVFJJU0ExLwAAAAABBlRSSVNBMi8AAAAAAgZUUklTQTMv
AAAAAAMGVFJJU0E0LwAAAAAEBlRSSVNBNS8AAAAABQZUUklTQTYvAAAAAAYGVFJJU0E3LwAAAAAH
BVRSSVNCLwAAAACGBlRSSVNCMC8AAAAAAAZUUklTQjEvAAAAAAEGVFJJU0IyLwAAAAACBlRSSVNC
My8AAAAAAwZUUklTQjQvAAAAAAQGVFJJU0I1LwAAAAAFAAAAAAAAAAAAAAZUUklTQjYvAAAAAAYG
VFJJU0I3LwAAAAAHBVRSSVNDLwAAAACHBlRSSVNDMC8AAAAAAAZUUklTQzEvAAAAAAEGVFJJU0My
LwAAAAACBlRSSVNDMy8AAAAAAwZUUklTQzQvAAAAAAQGVFJJU0M1LwAAAAAFBlRSSVNDNi8AAAAA
BgZUUklTQzcvAAAAAAcFVFJJU0QvAAAAAIgGVFJJU0QwLwAAAAAABlRSSVNEMS8AAAAAAQZUUklT
RDIvAAAAAAIGVFJJU0QzLwAAAAADBlRSSVNENC8AAAAABAZUUklTRDUvAAAAAAUGVFJJU0Q2LwAA
AAAGBlRSSVNENy8AAAAABwVUUklTRS8AAAAAiQZUUklTRTAvAAAAAAAGVFJJU0UxLwAAAAABBlRS
SVNFMi8AAAAAAgZUUklTRTMvAAAAAAMEVFJNVC8AAAAAAQRUVU4wLwAAAAAABFRVTjEvAAAAAAEE
VFVOMi8AAAAAAgRUVU4zLwAAAAADBFRVTjQvAAAAAAQFVFg4XzkvAAAAAAYDVFg5LwAAAAAGBFRY
OUQvAAAAAAAEVFhEOC8AAAAAAARUWEVOLwAAAAAFBFRYSUUvAAAAAAQEVFhJRi8AAAAABAVUWFJF
Ry8AAAAAGQVUWFNUQS8AAAAAmAJVQS8AAAAAAQZVTFBXVUUvAAAAAAUAB1VMUFdVSUUvAAAAAAIH
VUxQV1VJRi8AAAAAAgVWQ0ZHMC8AAAAABAVWQ0ZHMS8AAAAABQNWUjAvAAAAAAADVlIxLwAAAAAB
A1ZSMi8AAAAAAgNWUjMvAAAAAAMFVlJDT04vAAAAAJcEVlJFTi8AAAAABwRWUk9FLwAAAAAGA1ZS
Ui8AAAAABQRWUlNTLwAAAAAEAVcvAAAAAAAEV0NPTC8AAAAABwZXRFRDT04vAAAAAQUGV0RUUFMw
LwAAAAABBldEVFBTMS8AAAAAAgZXRFRQUzIvAAAAAAMGV0RUUFMzLwAAAAAEBFdQVUIvAAAAAJUF
V1BVQjAvAAAAAAAFV1BVQjEvAAAAAAEFV1BVQjIvAAAAAAIFV1BVQjMvAAAAAAMFV1BVQjQvAAAA
AAQFV1BVQjUvAAAAAAUFV1BVQjYvAAAAAAYFV1BVQjcvAAAAAAcCV1IvAAAAAAEEV1JFTi8AAAAA
AgVXUkVSUi8AAAAAAwNXVUUvAAAAAAEBWi8AAAAAAgdfQk9SMjFWLwAAAD7/B19CT1I0MFYvAAAA
P/8NX0JPUjRWX0JPUjIxVi8AAAA+/w1fQk9SNFZfQk9SNDBWLwAAAD//DV9CT1JFTl9OU0xFRVAv
AAAAPv8KX0JPUkVOX09GRi8AAAA8/wlfQk9SRU5fT04vAAAAP/8AAAANX0JPUkVOX1NCT0RFTi8A
AAA9/wtfQk9SX05TTEVFUC8AAAA+/whfQk9SX09GRi8AAAA8/wdfQk9SX09OLwAAAD//C19CT1Jf
U0JPREVOLwAAAD3/CF9DT05GSUcxLwAAACAHCF9DT05GSUcyLwAAACAICF9DUERfT0ZGLwAAAD//
B19DUERfT04vAAAAP38HX0NQX09GRi8AAAA//wZfQ1BfT04vAAAAP78KX0RFQlVHX09GRi8AAAA/
/wlfREVCVUdfT04vAAAAH/8HX0RFVklEMS8AAAAgBgdfRUNfT1NDLwAAAD/7Bl9FWFRSQy8AAAA/
/whfRVhUUkNJTy8AAAA//hFfRVhUUkNfT1NDX0NMS09VVC8AAAA//xNfRVhUUkNfT1NDX05PQ0xL
T1VULwAAAD/+Cl9GQ01FTl9PRkYvAAAAN/8JX0ZDTUVOX09OLwAAAD//CF9GT1NDX0VDLwAAAD/7
El9GT1NDX0VYVFJDX0NMS09VVC8AAAA//xRfRk9TQ19FWFRSQ19OT0NMS09VVC8AAAA//ghfRk9T
Q19IUy8AAAA/+hJfRk9TQ19JTlRSQ19DTEtPVVQvAAAAP/0UX0ZPU0NfSU5UUkNfTk9DTEtPVVQv
AAAAP/wIX0ZPU0NfTFAvAAAAP/gIX0ZPU0NfWFQvAAAAP/kAAAAAAAdfSFNfT1NDLwAAAD/6B19J
RExPQzAvAAAAIAAHX0lETE9DMS8AAAAgAQdfSURMT0MyLwAAACACB19JRExPQzMvAAAAIAMJX0lF
U09fT0ZGLwAAADv/CF9JRVNPX09OLwAAAD//B19JTlRPU0MvAAAAP/0JX0lOVE9TQ0lPLwAAAD/8
EV9JTlRSQ19PU0NfQ0xLT1VULwAAAD/9E19JTlRSQ19PU0NfTk9DTEtPVVQvAAAAP/wHX0xQX09T
Qy8AAAA/+AhfTFZQX09GRi8AAAAv/wdfTFZQX09OLwAAAD//Cl9NQ0xSRV9PRkYvAAAAP98JX01D
TFJFX09OLwAAAD//Cl9QV1JURV9PRkYvAAAAP/8JX1BXUlRFX09OLwAAAD/vCV9XRFRFX09GRi8A
AAA/9whfV0RURV9PTi8AAAA//whfV0RUX09GRi8AAAA/9wdfV0RUX09OLwAAAD//DF9XUlRfMUZP
VVJUSC8AAAA7/whfV1JUXzI1Ni8AAAA9/wlfV1JUX0hBTEYvAAAAOf8IX1dSVF9PRkYvAAAAP/8H
X1hUX09TQy8AAAA/+QhfXzE2Rjg4Ny8AAAAAAQpfX0NPREVfRU5ELwAAAB//DF9fQ09ERV9TVEFS
VC8AAAAAABBfX0NPTU1PTl9SQU1fRU5ELwAAAAB/AAAAAAAAAAAAEl9fQ09NTU9OX1JBTV9TVEFS
VC8AAAAAcAxfX0VFUFJPTV9FTkQvAAAAIf8OX19FRVBST01fU1RBUlQvAAAAIQAMX19WRUNUT1Jf
SU5ULwAAAAAEDl9fVkVDVE9SX1JFU0VULwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=`, 'base64');
            const prog = new gpsim.Program(cod);

            console.log('Target processor:', prog.targetProcessorType);
            console.log('Code ranges:', vectorToArray(prog.code).map(r => ({ addr: r.address, size: r.code.length })));
            console.log('Directives:', vectorToArray(prog.directives).map(dir => ({ addr: dir.address, type: dir.type, text: dir.text })));
            console.log('Line refs:', vectorToArray(prog.lineRefs).map(ref => ({ addr: ref.address, file: ref.file, line: ref.line })));
            console.log('Symbols:', vectorToArray(prog.symbols).map(sym => ({ type: sym.type, name: sym.name, value: sym.value })));

            const proc = ctx.add_processor_by_type(prog.targetProcessorType, 'aproc');

            prog.upload(proc);

            const pinCount = proc.get_pin_count();
            for (let i = 1; i <= pinCount; ++i) {
                const pin = proc.get_pin(i);
                if (pin) {
                    console.log("pin", i, pin.name());
                    pin.getMonitor().addSignalSink(new SignalSinkImpl(i));
                }
            }

            proc.step(20);

            const trace = ctx.GetTraceReader();
            console.log('Trace:', trace.empty, trace.size, trace.discarded);
            while (!trace.empty) {
                console.log('  ', trace.front());
                trace.pop();
            }
        } finally {
            sim.remove_interface(iface.get_id());
        }
    } finally {
        ctx.Clear();
    }
})
